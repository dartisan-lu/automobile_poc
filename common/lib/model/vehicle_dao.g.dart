// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'vehicle_dao.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

VehicleDao _$VehicleDaoFromJson(Map<String, dynamic> json) => VehicleDao(
      operationCode: json['OPE'] as String?,
      categoryCodeStatec: json['CATSTC'] as String,
      europeanBodyworkCode: json['CODCAR'] as String,
      bodyworkWording: json['LIBCAR'] as String,
      externalEuropeanCategoryCode: json['CATEU'] as String,
      color: json['COUL'] as String,
      indicationOfUse: json['INDUTI'] as String,
      originCountry: json['PAYPVN'] as String,
      manufacturerCode: json['CODMRQ'] as String,
      manufacturerWording: json['LIBMRQ'] as String,
      type: json['TYPUSI'] as String,
      commercialName: json['TYPCOM'] as String,
      ecApprovalNumber: json['PVRNUM'] as String,
      variant: json['PVRVAR'] as String,
      version: json['PVRVER'] as String,
      firstRegistrationDate: VehicleDao._dateFromJson(json['DATCIRPRM'] as DateTime),
      firstRegistrationLuDate: VehicleDao._dateNullFromJson(json['DATCIR_GD'] as DateTime?),
      registrationCertificateDate: VehicleDao._dateNullFromJson(json['DATCIR'] as DateTime?),
      offRoadDeclarationDate: VehicleDao._dateNullFromJson(json['DATHORCIR'] as DateTime?),
      massInRunningOrder: json['MVID'] as String,
      maximumLadenMass: json['MMA'] as String,
      maximumMassCombination: json['MMAENS'] as String,
      maximumVerticalMassCouplingPoint: json['MMAATT'] as String,
      maximumTowableMassBrakelessTrailer: json['MMARSF'] as String,
      maximumTowableMassCentreAxleTrailer: json['MMARAF'] as String,
      indicator4x4: json['I4X4'] as String,
      absIndicator: json['ABS'] as String,
      asrIndicator: json['ASR'] as String,
      frontSeats: VehicleDao._intFromJson(json['PLAAVA'] as int),
      backSeats: VehicleDao._intFromJson(json['PLAARR'] as int),
      specificFrontSeats: VehicleDao._intFromJson(json['PLASAV'] as int),
      specificBackSeats: VehicleDao._intFromJson(json['PLASAR'] as int),
      standingPlaces: VehicleDao._intFromJson(json['PLADEB'] as int),
      sittingPlaces: VehicleDao._intFromJson(json['PLAASS'] as int),
      length: VehicleDao._intFromJson(json['LON'] as int),
      width: VehicleDao._intFromJson(json['LAR'] as int),
      height: VehicleDao._intFromJson(json['HAU'] as int),
      simpleAxles: VehicleDao._intFromJson(json['ESSIM'] as int),
      tandemAxles: VehicleDao._intFromJson(json['ESTAN'] as int),
      tridemAxles: VehicleDao._intFromJson(json['ESTRI'] as int),
      wheelbase: json['EMPMAX'] as String,
      axleTrack1: json['LARES1'] as String,
      axleTrack2: json['LARES2'] as String,
      engineCode: json['TYPMOT'] as String,
      fuelCode: json['CODCRB'] as String,
      fuel: json['LIBCRB'] as String,
      cylinders: VehicleDao._intFromJson(json['NBRCYL'] as int),
      maximumPower: VehicleDao._doubleFromJson(json['PKW'] as num),
      engineCapacity: VehicleDao._intFromJson(json['CYD'] as int),
      userInformation: json['INFOUTI'] as String,
      co2Emissions: VehicleDao._intFromJson(json['INFCO2'] as int),
      fuelConsumption: VehicleDao._doubleFromJson(json['L100KM'] as num),
      exhaustEmissionsParticulates: VehicleDao._doubleFromJson(json['INFPARTICULE'] as num),
      exhaustEmissionsNox: VehicleDao._doubleFromJson(json['INFNOX'] as num),
      exhaustEmissionLevel: json['EUNORM'] as String,
      massWltp: json['mWLTP'] as String,
      co2EmissionsWltp: json['CO2WLTP'] as String,
      co2EmissionsEcoWltp: json['eWLTP'] as String,
      electricEnergyConsumption: json['CONSELEC'] as String,
      electricRange: VehicleDao._intFromJson(json['AUTOELEC'] as int),
      leasing: VehicleDao._boolFromJson(json['LO'] as bool),
    );

Map<String, dynamic> _$VehicleDaoToJson(VehicleDao instance) => <String, dynamic>{
      'OPE': instance.operationCode,
      'CATSTC': instance.categoryCodeStatec,
      'CODCAR': instance.europeanBodyworkCode,
      'LIBCAR': instance.bodyworkWording,
      'CATEU': instance.externalEuropeanCategoryCode,
      'COUL': instance.color,
      'INDUTI': instance.indicationOfUse,
      'PAYPVN': instance.originCountry,
      'CODMRQ': instance.manufacturerCode,
      'LIBMRQ': instance.manufacturerWording,
      'TYPUSI': instance.type,
      'TYPCOM': instance.commercialName,
      'PVRNUM': instance.ecApprovalNumber,
      'PVRVAR': instance.variant,
      'PVRVER': instance.version,
      'DATCIRPRM': VehicleDao._dateToJson(instance.firstRegistrationDate),
      'DATCIR_GD': VehicleDao._dateNullToJson(instance.firstRegistrationLuDate),
      'DATCIR': VehicleDao._dateNullToJson(instance.registrationCertificateDate),
      'DATHORCIR': VehicleDao._dateNullToJson(instance.offRoadDeclarationDate),
      'MVID': instance.massInRunningOrder,
      'MMA': instance.maximumLadenMass,
      'MMAENS': instance.maximumMassCombination,
      'MMAATT': instance.maximumVerticalMassCouplingPoint,
      'MMARSF': instance.maximumTowableMassBrakelessTrailer,
      'MMARAF': instance.maximumTowableMassCentreAxleTrailer,
      'I4X4': instance.indicator4x4,
      'ABS': instance.absIndicator,
      'ASR': instance.asrIndicator,
      'PLAAVA': VehicleDao._intToJson(instance.frontSeats),
      'PLAARR': VehicleDao._intToJson(instance.backSeats),
      'PLASAV': VehicleDao._intToJson(instance.specificFrontSeats),
      'PLASAR': VehicleDao._intToJson(instance.specificBackSeats),
      'PLADEB': VehicleDao._intToJson(instance.standingPlaces),
      'PLAASS': VehicleDao._intToJson(instance.sittingPlaces),
      'LON': VehicleDao._intToJson(instance.length),
      'LAR': VehicleDao._intToJson(instance.width),
      'HAU': VehicleDao._intToJson(instance.height),
      'ESSIM': VehicleDao._intToJson(instance.simpleAxles),
      'ESTAN': VehicleDao._intToJson(instance.tandemAxles),
      'ESTRI': VehicleDao._intToJson(instance.tridemAxles),
      'EMPMAX': instance.wheelbase,
      'LARES1': instance.axleTrack1,
      'LARES2': instance.axleTrack2,
      'TYPMOT': instance.engineCode,
      'CODCRB': instance.fuelCode,
      'LIBCRB': instance.fuel,
      'NBRCYL': VehicleDao._intToJson(instance.cylinders),
      'PKW': VehicleDao._doubleToJson(instance.maximumPower),
      'CYD': VehicleDao._intToJson(instance.engineCapacity),
      'INFOUTI': instance.userInformation,
      'INFCO2': VehicleDao._intToJson(instance.co2Emissions),
      'L100KM': VehicleDao._doubleToJson(instance.fuelConsumption),
      'INFPARTICULE': VehicleDao._doubleToJson(instance.exhaustEmissionsParticulates),
      'INFNOX': VehicleDao._doubleToJson(instance.exhaustEmissionsNox),
      'EUNORM': instance.exhaustEmissionLevel,
      'mWLTP': instance.massWltp,
      'CO2WLTP': instance.co2EmissionsWltp,
      'eWLTP': instance.co2EmissionsEcoWltp,
      'CONSELEC': instance.electricEnergyConsumption,
      'AUTOELEC': VehicleDao._intToJson(instance.electricRange),
      'LO': VehicleDao._boolToJson(instance.leasing),
    };
