// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'vehicle_dto.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

VehicleDto _$VehicleDtoFromJson(Map<String, dynamic> json) => VehicleDto(
      operationCode: json['operationCode'] as String?,
      categoryCodeStatec: json['categoryCodeStatec'] as String,
      europeanBodyworkCode: json['europeanBodyworkCode'] as String,
      bodyworkWording: json['bodyworkWording'] as String,
      externalEuropeanCategoryCode: json['externalEuropeanCategoryCode'] as String,
      color: json['color'] as String,
      indicationOfUse: json['indicationOfUse'] as String,
      originCountry: json['originCountry'] as String,
      manufacturerCode: json['manufacturerCode'] as String,
      manufacturerWording: json['manufacturerWording'] as String,
      type: json['type'] as String,
      commercialName: json['commercialName'] as String,
      ecApprovalNumber: json['ecApprovalNumber'] as String,
      variant: json['variant'] as String,
      version: json['version'] as String,
      firstRegistrationDate: DateTime.parse(json['firstRegistrationDate'] as String),
      firstRegistrationLuDate:
          json['firstRegistrationLuDate'] == null ? null : DateTime.parse(json['firstRegistrationLuDate'] as String),
      registrationCertificateDate: json['registrationCertificateDate'] == null
          ? null
          : DateTime.parse(json['registrationCertificateDate'] as String),
      offRoadDeclarationDate:
          json['offRoadDeclarationDate'] == null ? null : DateTime.parse(json['offRoadDeclarationDate'] as String),
      massInRunningOrder: json['massInRunningOrder'] as String,
      maximumLadenMass: json['maximumLadenMass'] as String,
      maximumMassCombination: json['maximumMassCombination'] as String,
      maximumVerticalMassCouplingPoint: json['maximumVerticalMassCouplingPoint'] as String,
      maximumTowableMassBrakelessTrailer: json['maximumTowableMassBrakelessTrailer'] as String,
      maximumTowableMassCentreAxleTrailer: json['maximumTowableMassCentreAxleTrailer'] as String,
      indicator4x4: json['indicator4x4'] as String,
      absIndicator: json['absIndicator'] as String,
      asrIndicator: json['asrIndicator'] as String,
      frontSeats: json['frontSeats'] as int,
      backSeats: json['backSeats'] as int,
      specificFrontSeats: json['specificFrontSeats'] as int,
      specificBackSeats: json['specificBackSeats'] as int,
      standingPlaces: json['standingPlaces'] as int,
      sittingPlaces: json['sittingPlaces'] as int,
      length: json['length'] as int,
      width: json['width'] as int,
      height: json['height'] as int,
      simpleAxles: json['simpleAxles'] as int,
      tandemAxles: json['tandemAxles'] as int,
      tridemAxles: json['tridemAxles'] as int,
      wheelbase: json['wheelbase'] as String,
      axleTrack1: json['axleTrack1'] as String,
      axleTrack2: json['axleTrack2'] as String,
      engineCode: json['engineCode'] as String,
      fuelCode: json['fuelCode'] as String,
      fuel: json['fuel'] as String,
      cylinders: json['cylinders'] as int,
      maximumPower: (json['maximumPower'] as num).toDouble(),
      engineCapacity: json['engineCapacity'] as int,
      userInformation: json['userInformation'] as String,
      co2Emissions: json['co2Emissions'] as int,
      fuelConsumption: (json['fuelConsumption'] as num).toDouble(),
      exhaustEmissionsParticulates: (json['exhaustEmissionsParticulates'] as num).toDouble(),
      exhaustEmissionsNox: (json['exhaustEmissionsNox'] as num).toDouble(),
      exhaustEmissionLevel: json['exhaustEmissionLevel'] as String,
      massWltp: json['massWltp'] as String,
      co2EmissionsWltp: json['co2EmissionsWltp'] as String,
      co2EmissionsEcoWltp: json['co2EmissionsEcoWltp'] as String,
      electricEnergyConsumption: json['electricEnergyConsumption'] as String,
      electricRange: json['electricRange'] as int,
      leasing: json['leasing'] as bool,
    );

Map<String, dynamic> _$VehicleDtoToJson(VehicleDto instance) => <String, dynamic>{
      'operationCode': instance.operationCode,
      'categoryCodeStatec': instance.categoryCodeStatec,
      'europeanBodyworkCode': instance.europeanBodyworkCode,
      'absIndicator': instance.absIndicator,
      'asrIndicator': instance.asrIndicator,
      'axleTrack1': instance.axleTrack1,
      'axleTrack2': instance.axleTrack2,
      'backSeats': instance.backSeats,
      'bodyworkWording': instance.bodyworkWording,
      'co2Emissions': instance.co2Emissions,
      'co2EmissionsEcoWltp': instance.co2EmissionsEcoWltp,
      'co2EmissionsWltp': instance.co2EmissionsWltp,
      'color': instance.color,
      'commercialName': instance.commercialName,
      'cylinders': instance.cylinders,
      'ecApprovalNumber': instance.ecApprovalNumber,
      'electricEnergyConsumption': instance.electricEnergyConsumption,
      'electricRange': instance.electricRange,
      'engineCapacity': instance.engineCapacity,
      'engineCode': instance.engineCode,
      'exhaustEmissionLevel': instance.exhaustEmissionLevel,
      'exhaustEmissionsNox': instance.exhaustEmissionsNox,
      'exhaustEmissionsParticulates': instance.exhaustEmissionsParticulates,
      'externalEuropeanCategoryCode': instance.externalEuropeanCategoryCode,
      'firstRegistrationDate': instance.firstRegistrationDate.toIso8601String(),
      'firstRegistrationLuDate': instance.firstRegistrationLuDate?.toIso8601String(),
      'frontSeats': instance.frontSeats,
      'fuel': instance.fuel,
      'fuelCode': instance.fuelCode,
      'fuelConsumption': instance.fuelConsumption,
      'height': instance.height,
      'indicationOfUse': instance.indicationOfUse,
      'indicator4x4': instance.indicator4x4,
      'leasing': instance.leasing,
      'length': instance.length,
      'manufacturerCode': instance.manufacturerCode,
      'manufacturerWording': instance.manufacturerWording,
      'massInRunningOrder': instance.massInRunningOrder,
      'massWltp': instance.massWltp,
      'maximumLadenMass': instance.maximumLadenMass,
      'maximumMassCombination': instance.maximumMassCombination,
      'maximumPower': instance.maximumPower,
      'maximumTowableMassBrakelessTrailer': instance.maximumTowableMassBrakelessTrailer,
      'maximumTowableMassCentreAxleTrailer': instance.maximumTowableMassCentreAxleTrailer,
      'maximumVerticalMassCouplingPoint': instance.maximumVerticalMassCouplingPoint,
      'offRoadDeclarationDate': instance.offRoadDeclarationDate?.toIso8601String(),
      'originCountry': instance.originCountry,
      'registrationCertificateDate': instance.registrationCertificateDate?.toIso8601String(),
      'simpleAxles': instance.simpleAxles,
      'sittingPlaces': instance.sittingPlaces,
      'specificBackSeats': instance.specificBackSeats,
      'specificFrontSeats': instance.specificFrontSeats,
      'standingPlaces': instance.standingPlaces,
      'tandemAxles': instance.tandemAxles,
      'tridemAxles': instance.tridemAxles,
      'type': instance.type,
      'userInformation': instance.userInformation,
      'variant': instance.variant,
      'version': instance.version,
      'wheelbase': instance.wheelbase,
      'width': instance.width,
    };
